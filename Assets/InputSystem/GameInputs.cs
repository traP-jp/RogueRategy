//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""BattleScene"",
            ""id"": ""4b094081-f848-45bf-bd00-c11d36a28e58"",
            ""actions"": [
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""8a574952-27c0-4ee0-8839-e6eb120ff4a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""ce62a096-8f78-4e63-93a9-029d6938f5c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f9c40c09-5028-4ec8-aaac-ccb971d953eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""1b35d70d-1718-4b8c-87e3-d8d656b164b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slow"",
                    ""type"": ""Button"",
                    ""id"": ""d4fb6ed4-06b9-4e58-b9f5-b3d1937f90fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem1"",
                    ""type"": ""Button"",
                    ""id"": ""81484278-3e1b-42ad-a06a-a46d52fd2c17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem2"",
                    ""type"": ""Button"",
                    ""id"": ""a79f9461-1094-41d4-814e-f6c8f7d10003"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem3"",
                    ""type"": ""Button"",
                    ""id"": ""250c4e6d-21cb-435d-9106-672eec93ca5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6612e265-2bf6-4b74-b679-0c5c6b66d0c5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e78c967d-9102-4f84-9470-54a90295ce7f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8153804-7a0d-4e3d-b6c7-7ef8aff0d175"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ffd0694-9c9f-448f-8704-74fce16fcd59"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d667acfc-6d63-4ec4-9294-1d6f58882538"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8247449-05f1-408f-a79a-76f5b2b596b5"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b72f2ed0-4593-4b77-8e67-6a2df921b095"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8ddf915-8362-4973-b4c2-658be79c4362"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TitleScene"",
            ""id"": ""ef426628-62cb-45ff-9362-d9ec685a4f7a"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""2df2a3d7-fdec-4613-a578-bd5f7da5be21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""a88e4643-b9e9-4458-890f-44e217be0785"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Decide"",
                    ""type"": ""Button"",
                    ""id"": ""559b19e4-4028-4f2a-a38e-543ee9b04c7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0780608b-42c2-4a5f-8d86-6b4407a9c17b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dab2fc2e-142d-4c1b-b3e0-9b08372de8e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""043cec92-2596-48de-b9a9-4d3206ff18fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1966f2bd-b613-467f-a3cf-f716b3e4ae71"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17860d8e-b5d6-4215-8aea-cdd16bed484d"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d038a9bb-c35f-4a2c-ab18-e1c964e5dd91"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BattleScene
        m_BattleScene = asset.FindActionMap("BattleScene", throwIfNotFound: true);
        m_BattleScene_Down = m_BattleScene.FindAction("Down", throwIfNotFound: true);
        m_BattleScene_Up = m_BattleScene.FindAction("Up", throwIfNotFound: true);
        m_BattleScene_Left = m_BattleScene.FindAction("Left", throwIfNotFound: true);
        m_BattleScene_Right = m_BattleScene.FindAction("Right", throwIfNotFound: true);
        m_BattleScene_Slow = m_BattleScene.FindAction("Slow", throwIfNotFound: true);
        m_BattleScene_UseItem1 = m_BattleScene.FindAction("UseItem1", throwIfNotFound: true);
        m_BattleScene_UseItem2 = m_BattleScene.FindAction("UseItem2", throwIfNotFound: true);
        m_BattleScene_UseItem3 = m_BattleScene.FindAction("UseItem3", throwIfNotFound: true);
        // TitleScene
        m_TitleScene = asset.FindActionMap("TitleScene", throwIfNotFound: true);
        m_TitleScene_Up = m_TitleScene.FindAction("Up", throwIfNotFound: true);
        m_TitleScene_Down = m_TitleScene.FindAction("Down", throwIfNotFound: true);
        m_TitleScene_Decide = m_TitleScene.FindAction("Decide", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BattleScene
    private readonly InputActionMap m_BattleScene;
    private List<IBattleSceneActions> m_BattleSceneActionsCallbackInterfaces = new List<IBattleSceneActions>();
    private readonly InputAction m_BattleScene_Down;
    private readonly InputAction m_BattleScene_Up;
    private readonly InputAction m_BattleScene_Left;
    private readonly InputAction m_BattleScene_Right;
    private readonly InputAction m_BattleScene_Slow;
    private readonly InputAction m_BattleScene_UseItem1;
    private readonly InputAction m_BattleScene_UseItem2;
    private readonly InputAction m_BattleScene_UseItem3;
    public struct BattleSceneActions
    {
        private @GameInputs m_Wrapper;
        public BattleSceneActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Down => m_Wrapper.m_BattleScene_Down;
        public InputAction @Up => m_Wrapper.m_BattleScene_Up;
        public InputAction @Left => m_Wrapper.m_BattleScene_Left;
        public InputAction @Right => m_Wrapper.m_BattleScene_Right;
        public InputAction @Slow => m_Wrapper.m_BattleScene_Slow;
        public InputAction @UseItem1 => m_Wrapper.m_BattleScene_UseItem1;
        public InputAction @UseItem2 => m_Wrapper.m_BattleScene_UseItem2;
        public InputAction @UseItem3 => m_Wrapper.m_BattleScene_UseItem3;
        public InputActionMap Get() { return m_Wrapper.m_BattleScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleSceneActions set) { return set.Get(); }
        public void AddCallbacks(IBattleSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleSceneActionsCallbackInterfaces.Add(instance);
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Slow.started += instance.OnSlow;
            @Slow.performed += instance.OnSlow;
            @Slow.canceled += instance.OnSlow;
            @UseItem1.started += instance.OnUseItem1;
            @UseItem1.performed += instance.OnUseItem1;
            @UseItem1.canceled += instance.OnUseItem1;
            @UseItem2.started += instance.OnUseItem2;
            @UseItem2.performed += instance.OnUseItem2;
            @UseItem2.canceled += instance.OnUseItem2;
            @UseItem3.started += instance.OnUseItem3;
            @UseItem3.performed += instance.OnUseItem3;
            @UseItem3.canceled += instance.OnUseItem3;
        }

        private void UnregisterCallbacks(IBattleSceneActions instance)
        {
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Slow.started -= instance.OnSlow;
            @Slow.performed -= instance.OnSlow;
            @Slow.canceled -= instance.OnSlow;
            @UseItem1.started -= instance.OnUseItem1;
            @UseItem1.performed -= instance.OnUseItem1;
            @UseItem1.canceled -= instance.OnUseItem1;
            @UseItem2.started -= instance.OnUseItem2;
            @UseItem2.performed -= instance.OnUseItem2;
            @UseItem2.canceled -= instance.OnUseItem2;
            @UseItem3.started -= instance.OnUseItem3;
            @UseItem3.performed -= instance.OnUseItem3;
            @UseItem3.canceled -= instance.OnUseItem3;
        }

        public void RemoveCallbacks(IBattleSceneActions instance)
        {
            if (m_Wrapper.m_BattleSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleSceneActions @BattleScene => new BattleSceneActions(this);

    // TitleScene
    private readonly InputActionMap m_TitleScene;
    private List<ITitleSceneActions> m_TitleSceneActionsCallbackInterfaces = new List<ITitleSceneActions>();
    private readonly InputAction m_TitleScene_Up;
    private readonly InputAction m_TitleScene_Down;
    private readonly InputAction m_TitleScene_Decide;
    public struct TitleSceneActions
    {
        private @GameInputs m_Wrapper;
        public TitleSceneActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_TitleScene_Up;
        public InputAction @Down => m_Wrapper.m_TitleScene_Down;
        public InputAction @Decide => m_Wrapper.m_TitleScene_Decide;
        public InputActionMap Get() { return m_Wrapper.m_TitleScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TitleSceneActions set) { return set.Get(); }
        public void AddCallbacks(ITitleSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_TitleSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TitleSceneActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Decide.started += instance.OnDecide;
            @Decide.performed += instance.OnDecide;
            @Decide.canceled += instance.OnDecide;
        }

        private void UnregisterCallbacks(ITitleSceneActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Decide.started -= instance.OnDecide;
            @Decide.performed -= instance.OnDecide;
            @Decide.canceled -= instance.OnDecide;
        }

        public void RemoveCallbacks(ITitleSceneActions instance)
        {
            if (m_Wrapper.m_TitleSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITitleSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_TitleSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TitleSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TitleSceneActions @TitleScene => new TitleSceneActions(this);
    public interface IBattleSceneActions
    {
        void OnDown(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnSlow(InputAction.CallbackContext context);
        void OnUseItem1(InputAction.CallbackContext context);
        void OnUseItem2(InputAction.CallbackContext context);
        void OnUseItem3(InputAction.CallbackContext context);
    }
    public interface ITitleSceneActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnDecide(InputAction.CallbackContext context);
    }
}
